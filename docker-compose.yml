volumes:
  n8n_storage:
  postgres_storage:
  ollama_storage:
  qdrant_storage:
  redis_storage:
  nocodb_storage:

networks:
  n8n-network:

x-n8n: &service-n8n
  image: n8nio/n8n:latest
  networks:
    - n8n-network
  environment:
    - DB_TYPE=postgresdb
    - DB_POSTGRESDB_HOST=postgres
    - DB_POSTGRESDB_USER=${POSTGRES_USER}
    - DB_POSTGRESDB_PASSWORD=${POSTGRES_PASSWORD}
    - N8N_DIAGNOSTICS_ENABLED=false
    - N8N_PERSONALIZATION_ENABLED=false
    - N8N_ENFORCE_SETTINGS_FILE_PERMISSIONS=true
    - N8N_RUNNERS_ENABLED=true
    - N8N_ENCRYPTION_KEY=${N8N_ENCRYPTION_KEY}
    - N8N_LICENSE_ACTIVATION_KEY=${N8N_LICENSE_ACTIVATION_KEY}
    - N8N_USER_MANAGEMENT_JWT_SECRET=${N8N_USER_MANAGEMENT_JWT_SECRET}
    - N8N_SECURE_COOKIE=false
    - OLLAMA_HOST=ollama:11434
    - WEBHOOK_URL=http://${NGROK_DOMAIN}.ngrok-free.app

x-ollama: &service-ollama
  image: ollama/ollama:latest
  container_name: ollama
  networks:
    - n8n-network
  restart: unless-stopped
  ports:
    - 11434:11434
  volumes:
    - ollama_storage:/root/.ollama

x-init-ollama: &init-ollama
  image: ollama/ollama:latest
  networks:
    - n8n-network
  container_name: ollama-pull-llama
  volumes:
    - ollama_storage:/root/.ollama
  entrypoint: /bin/sh
  environment:
    - OLLAMA_HOST=ollama:11434
  command:
    - "-c"
    - "sleep 3; ollama pull llama3.2"

services:
  traefik:
    image: "traefik:v3.3"
    container_name: "traefik"
    hostname: traefik.localhost
    command:
      #  - "--log.level=DEBUG"
      - "--api.insecure=true"
      - "--providers.docker=true"
      - "--providers.docker.exposedbydefault=false"
      - "--entryPoints.web.address=:80"
      - "--entryPoints.postgres.address=:5432"
      - "--entryPoints.redis.address=:6379"
    ports:
      - "80:80"
      - "8080:8080"
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.traefik.rule=Host(`traefik.localhost`)"
      - "traefik.http.services.traefik.loadbalancer.server.port=8080"
      - "traefik.http.routers.traefik.entrypoints=web"
    volumes:
      - "/var/run/docker.sock:/var/run/docker.sock:ro"
    networks:
      - n8n-network

  postgres:
    image: postgres:16-alpine
    hostname: postgres.localhost
    container_name: postgres
    networks:
      - n8n-network
    restart: unless-stopped
    environment:
      - POSTGRES_USER
      - POSTGRES_PASSWORD
      - POSTGRES_DB
    volumes:
      - postgres_storage:/var/lib/postgresql/data
    labels:
      - "traefik.enable=true"
      - "traefik.tcp.routers.postgres.rule=HostSNI(`*`)"
      - "traefik.tcp.routers.postgres.entrypoints=postgres"
    healthcheck:
      test:
        [
          "CMD-SHELL",
          "pg_isready -h localhost -U ${POSTGRES_USER} -d ${POSTGRES_DB}",
        ]
      interval: 5s
      timeout: 5s
      retries: 10

  redis:
    image: redis:7-alpine
    container_name: redis
    hostname: redis.localhost
    networks:
      - n8n-network
    restart: unless-stopped
    environment:
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - REDIS_PASSWORD
    ports:
      - 6379:6379
    volumes:
      - redis_storage:/data
      - ./redis/redis.conf:/usr/local/etc/redis/redis.conf
    command: ["redis-server", "/usr/local/etc/redis/redis.conf"]
    labels:
      - "traefik.enable=true"
      - "traefik.tcp.routers.redis.rule=HostSNI(`*`)"
      - "traefik.tcp.routers.redis.entrypoints=redis"

  nocodb:
    image: nocodb/nocodb:latest
    container_name: nocodb
    hostname: nocodb.localhost
    networks:
      - n8n-network
    restart: unless-stopped
    ports:
      - 8081:8080
    environment:
      - NC_DB=pg://postgres:5432?u=${POSTGRES_USER}&p=${POSTGRES_PASSWORD}&d=nocodb
    volumes:
      - nocodb_storage:/usr/app/data
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.nocodb.rule=Host(`nocodb.localhost`)"
      - "traefik.http.services.nocodb.loadbalancer.server.port=8080"
      - "traefik.http.routers.nocodb.entrypoints=web"
    depends_on:
      postgres:
        condition: service_healthy

  n8n-restore:
    <<: *service-n8n
    container_name: n8n-restore
    entrypoint: /bin/sh
    command:
      - "-c"
      - "n8n import:credentials --separate --input=/backup/credentials && n8n import:workflow --separate --input=/backup/workflows"
    volumes:
      - ./n8n/backup:/backup
    depends_on:
      postgres:
        condition: service_healthy

  n8n-backup:
    <<: *service-n8n
    container_name: n8n-backup
    entrypoint: /bin/sh
    command:
      - "-c"
      - "n8n export:credentials --backup --output=/backup/credentials/ -- && n8n export:workflow --backup --output=/backup/workflows/"
    volumes:
      - ./n8n/backup:/backup
      - ./n8n/backup/workflows:/home/node/workflows
      - ./n8n/backup/credentials:/home/node/credentials
    depends_on:
      postgres:
        condition: service_healthy

  n8n:
    <<: *service-n8n
    hostname: n8n.localhost
    container_name: n8n
    restart: unless-stopped
    networks:
      - n8n-network
    ports:
      - 5678:5678
    volumes:
      - n8n_storage:/home/node/.n8n
      - ./n8n/backup:/backup
      - ./shared:/data/shared
      - ./n8n/backup/workflows:/home/node/workflows
      - ./n8n/backup/credentials:/home/node/credentials
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.n8n.rule=Host(`n8n.localhost`)"
      - "traefik.http.services.n8n.loadbalancer.server.port=5678"
      - "traefik.http.routers.n8n.entrypoints=web"
    depends_on:
      postgres:
        condition: service_healthy
      n8n-import:
        condition: service_completed_successfully

  ngrok:
    container_name: ngrok
    image: ngrok/ngrok:latest
    ports:
      - 4040:4040
    restart: unless-stopped
    environment:
      - NGROK_AUTHTOKEN=${NGROK_AUTHTOKEN}
    command: http http://n8n:5678 --url="${NGROK_DOMAIN}.ngrok-free.app" --log=stdout
    depends_on:
      - n8n
    networks:
      - n8n-network

  qdrant:
    image: qdrant/qdrant
    hostname: qdrant.localhost
    container_name: qdrant
    networks:
      - n8n-network
    restart: unless-stopped
    ports:
      - 6333:6333
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.qdrant.rule=Host(`qdrant.localhost`)"
      - "traefik.http.services.qdrant.loadbalancer.server.port=6333"
      - "traefik.http.routers.qdrant.entrypoints=web"
    volumes:
      - qdrant_storage:/qdrant/storage

  ollama-cpu:
    profiles: ["cpu"]
    <<: *service-ollama

  ollama-gpu:
    profiles: ["gpu-nvidia"]
    <<: *service-ollama
    deploy:
      resources:
        reservations:
          devices:
            - driver: nvidia
              count: 1
              capabilities: [gpu]

  ollama-gpu-amd:
    profiles: ["gpu-amd"]
    <<: *service-ollama
    image: ollama/ollama:rocm
    devices:
      - "/dev/kfd"
      - "/dev/dri"

  ollama-pull-llama-cpu:
    profiles: ["cpu"]
    <<: *init-ollama
    depends_on:
      - ollama-cpu

  ollama-pull-llama-gpu:
    profiles: ["gpu-nvidia"]
    <<: *init-ollama
    depends_on:
      - ollama-gpu

  ollama-pull-llama-gpu-amd:
    profiles: [gpu-amd]
    <<: *init-ollama
    image: ollama/ollama:rocm
    depends_on:
      - ollama-gpu-amd
